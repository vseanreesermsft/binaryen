trigger:
  batch: true
  branches:
    include:
    - dotnet/main
    - dotnet/release/*

pr:
  branches:
    include:
    - dotnet/main
    - dotnet/release/*

variables:
- template: /eng/common-variables.yml
- template: /eng/common/templates/variables/pool-providers.yml

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      jobs:

      ############ LINUX BUILD ############
      - job: Build_Linux
        displayName: Linux
        timeoutInMinutes: 360
        strategy:
          matrix:
            x64:
              assetManifestOS: linux
              assetManifestPlatform: x64
              imagename: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64
              rootfs: /crossrootfs/x64
              ClangTargetArg: /p:ClangTarget=x86_64-linux-gnu
              ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
              archflag: --arch x64
            arm64:
              assetManifestOS: linux
              assetManifestPlatform: arm64
              imagename: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64
              rootfs: /crossrootfs/arm64
              ClangTargetArg: /p:ClangTarget=aarch64-linux-gnu
              ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
              archflag: --arch arm64
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals build.ubuntu.2204.amd64.open
        container:
          image: $(imagename)
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - bash: |
            ./build.sh --ci --restore --build --pack $(archflag) --configuration $(_BuildConfig) $(_InternalBuildArgs) $(ClangTargetArg) $(ClangBinDirArg) /p:RestoreUsingNuGetTargets=false
          displayName: 'Build and package'
          env:
            ROOTFS_DIR: $(rootfs)

        - bash:
            ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) --projects $(Build.SourcesDirectory)/binaryen.proj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

      ############ LINUX MUSL BUILD ############
      - job: Build_Linux_musl
        displayName: Linux_musl
        timeoutInMinutes: 360
        strategy:
          matrix:
            x64:
              assetManifestOS: linux-musl
              assetManifestPlatform: x64
              imagename: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64-alpine
              rootfs: /crossrootfs/x64
              ClangTargetArg: /p:ClangTarget=x86_64-alpine-linux-musl
              ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
              archflag: --arch x64
            arm64:
              assetManifestOS: linux-musl
              assetManifestPlatform: arm64
              imagename: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64-alpine
              rootfs: /crossrootfs/arm64
              ClangTargetArg: /p:ClangTarget=aarch64-alpine-linux-musl
              ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
              archflag: --arch arm64
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals build.ubuntu.2204.amd64.open
        container:
          image: $(imagename)
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - bash: |
            ./build.sh --ci --restore --build --pack $(archflag) --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:OutputRid=linux-musl-$(assetManifestPlatform) $(ClangTargetArg) $(ClangBinDirArg) /p:RestoreUsingNuGetTargets=false
          displayName: 'Build and package'
          env:
            ROOTFS_DIR: $(rootfs)

        - bash:
            ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) --projects $(Build.SourcesDirectory)/binaryen.proj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

      ############ MACOS BUILD ############
      - job: Build_macOS
        displayName: macOS
        timeoutInMinutes: 360
        strategy:
          matrix:
            x64:
              assetManifestOS: osx
              assetManifestPlatform: x64
              archflag: --arch x64
            arm64:
              assetManifestOS: osx
              assetManifestPlatform: arm64
              archflag: --arch arm64
        pool:
          vmImage: macos-13
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - bash: |
            ./build.sh --ci --restore --build --pack $(archflag) --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:RestoreUsingNuGetTargets=false
          displayName: 'Build and package'

        - bash:
            ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) --projects $(Build.SourcesDirectory)/binaryen.proj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))

      ############ WINDOWS BUILD ############
      - job: Build_Windows
        displayName: Windows
        timeoutInMinutes: 120
        strategy:
          matrix:
            x64:
              assetManifestOS: win
              assetManifestPlatform: x64
              archflag: -arch x64
            arm64:
              assetManifestOS: win
              assetManifestPlatform: arm64
              archflag: -arch arm64
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals 1es-windows-2022-open
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
          displayName: 'Clean up working directory'

        - powershell: eng\build.ps1 -ci -restore -build -pack $(archflag) -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:RestoreUsingNuGetTargets=false
          displayName: 'Build and package'

        - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=$(_BuildConfig)-$(assetManifestOS) /p:PlatformName=$(assetManifestPlatform) -projects $(Build.SourcesDirectory)\binaryen.proj
          displayName: Publish packages
          condition: and(succeeded(), ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'))
